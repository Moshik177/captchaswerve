// Copyright (C) 2009

package net.continuumsecurity.captcha.caption;

import org.apache.log4j.Logger;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Class used to solve CAPTCHA 
 * 
 * @author 
 *
 */
public class CaptchaSolver {
	private String _login;
	private String _accessKey;
    public static Logger log = Logger.getLogger(CaptchaSolver.class);
	
	private final String CLIENT_VERSION = "1.0";
	private final String CAPTCHA_SOLVE_URI = "http://captchabuster.com/client/captcha.ashx";
	private final String CAPTCHA_CLAIM_URI = "http://captchabuster.com/client/badcaptcha.ashx";
	private final String BALANCE_URI = "http://captchabuster.com/client/balance.ashx";
	
	private final Pattern _regexCaptcha = Pattern.compile("OK/([\\d\\.]+)[\\r\\n]+([^\\r\\n]*)[\\r\\n]+(\\w+)[\\r\\n]+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
	private final Pattern _regexBadCaptcha = Pattern.compile("OK/([\\d\\.]+)[\\r\\n]+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
	private final Pattern _regexBalance = Pattern.compile("OK/([\\d\\.]+)[\\r\\n]+([\\d+\\.])[\\r\\n]*", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
	private final Pattern _regexError = Pattern.compile("ERR/([\\d\\.]+)[\\r\\n]+(\\d+)[\\r\\n]+([^\\r\\n]*)[\\r\\n]+", Pattern.CASE_INSENSITIVE | Pattern.MULTILINE);
	private final DateFormat _dateFormat = new SimpleDateFormat("yyyy-M-d");
    private final String CONFIGFILE = "captchabuster.properties";
	

	public CaptchaSolver () {
		Properties config = new Properties();
		try {
			config.load(new FileInputStream(CONFIGFILE));
		} catch (FileNotFoundException e) {
			log.error("No config file for capturebuster.com found: " + CONFIGFILE);
		} catch (IOException e) {
            log.error("Error reading config file: " + CONFIGFILE);
		}
		_login = config.getProperty("login");
		_accessKey = config.getProperty("key");
	}
	
	/**
	 * Initializes the object 
	 * Please call this method. It is reserved for future releases.
	 */
	public void initialize() {
		
	}
	
	/**
	 * Cleans resources used by the object 
	 */
	public void dispose() {
		
	}

	public SolveResult solveCaptcha(InputStream imageStream) throws Exception {
		if (imageStream == null)
            throw new IllegalArgumentException("captcha");
		
		Dictionary<String, String> postParameters = new Hashtable<String, String>();
		postParameters.put("ver", CLIENT_VERSION);
		postParameters.put("login", _login);
		postParameters.put("key", MD5Helper.getMD5StringHash(_login + _dateFormat.format(new Date()) + _accessKey));
		
		String content = HttpHelper.ReadUri(CAPTCHA_SOLVE_URI, postParameters, imageStream);
		Matcher match = _regexCaptcha.matcher(content);
		if (match.find()) {
			if (match.group(1).charAt(0) != CLIENT_VERSION.charAt(0))
				throw new Exception("The server version is different from the client version. Please update the software.");
			return new SolveResult(match.group(2), match.group(1), match.group(3));
		}
		
		match = _regexError.matcher(content); 
		if (!match.find()) 
			throw new Exception(String.format("The server has returned unexpected result: %s", content));
		
		throw new CaptchaSolveException(Integer.parseInt(match.group(2)), match.group(3), match.group(1));
	}
	
	/**
	 * Marks CAPTCHA as recognized incorrectly. Please use this method with care to avoid ban 
	 * @param captchaId ID of the CAPTCHA generated by the server. It can be obtained from SolveResult.CaptchaId
	 * @throws Exception 
	 */
	public void markAsError(String captchaId) throws Exception {
		if (captchaId == null || captchaId.isEmpty())
			throw new IllegalArgumentException("captchaId");
		
		Dictionary<String, String> postParameters = new Hashtable<String, String>();
		postParameters.put("ver", CLIENT_VERSION);
		postParameters.put("login", _login);
		postParameters.put("key", MD5Helper.getMD5StringHash(_login + _dateFormat.format(new Date()) + _accessKey));
		postParameters.put("id", captchaId);
		
		String content = HttpHelper.ReadUri(CAPTCHA_CLAIM_URI, postParameters, null);
		
		Matcher match = _regexBadCaptcha.matcher(content);
		if (match.find()) {
			if (match.group(1).charAt(0) != CLIENT_VERSION.charAt(0))
				throw new Exception("The server version is different from the client version. Please update the software.");
		} else {		
			match = _regexError.matcher(content); 
			if (!match.find()) 
				throw new Exception(String.format("The server has returned unexpected result: %s", content));
		
			throw new CaptchaSolveException(Integer.parseInt(match.group(2)), match.group(3), match.group(1));
		}
	}

	/**
	 * Gets user balance 
	 * @return
	 * @throws Exception 
	 */
	public int getBalance() throws Exception {
		Dictionary<String, String> postParameters = new Hashtable<String, String>();
		postParameters.put("ver", CLIENT_VERSION);
		postParameters.put("login", _login);
		postParameters.put("key", MD5Helper.getMD5StringHash(_login + _dateFormat.format(new Date()) + _accessKey));
		
		String content = HttpHelper.ReadUri(BALANCE_URI, postParameters, null);
		System.out.println("Content:\n"+content);
		Matcher match = _regexBalance.matcher(content);
		if (match.find()) {
			if (match.group(1).charAt(0) != CLIENT_VERSION.charAt(0))
				throw new Exception("The server version is different from the client version. Please update the software.");
			
			return Integer.parseInt(match.group(2));
		} else {		
			match = _regexError.matcher(content); 
			if (!match.find()) 
				throw new Exception(String.format("The server has returned unexpected result: %s", content));
		
			throw new CaptchaSolveException(Integer.parseInt(match.group(2)), match.group(3), match.group(1));
		}
	}
}
